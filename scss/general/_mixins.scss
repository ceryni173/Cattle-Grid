// @font-face {
// 	font-family: 'Gotham-Light';
// 	src: url('../fonts/Gotham/GothamHTF-Light.otf');
// }
// @font-face {
// 	font-family: 'Gotham-Book';
// 	src: url('../fonts/Gotham/GothamHTF-Book.otf');
// }
// @font-face {
// 	font-family: 'Gotham-Bold';
// 	src: url('../fonts/Gotham/GothamHTF-Bold.otf');
// }
// @font-face {
// 	font-family: 'Gotham-Thin';
// 	src: url('../fonts/Gotham/GothamHTF-Thin.otf');
// }

//button generators
@mixin button-bg($bg, $txt) {
	background: $bg;
	border: $bg;
	color: $txt;
	&:hover,
	&:focus {
		background:darken($bg,10%);
		border:darken($bg, 10%);
		transition: all 0.3s ease;
	}
}

//button generators
@mixin button-hollow($border, $txt) {
	background: transparent;
	border: 1px solid $border;
	color: $txt;
	&:hover,
	&:focus {
		border: 1px solid darken($border, 10%);
		transition: all 0.3s ease;
		color: darken($txt, 10%);
	}
}

// Deep Get
@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);
	@if ($length > 1) {
		$rest: ();
		@for $i from 2 through $length {
			$rest: append($rest, nth($keys, $i))
		}
		@return map-fetch($value, $rest)
	} @else {
		@return $value;
	}
}

// set font isizse in rems
$browser-context: 14;
@function rem-calc($pixels, $context: $browser-context) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}
	@if (unitless($context)) {
		$context: $context * 1px;
	}
	@return $pixels / $context * 1em;
}
// font-size: rem-calc(##)


// set the standard for the pseufo code block
@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}
// @include pseudo;

@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}
// @include input-placeholder {
//     color: $grey;
// }

@function z($name) {
	@if index($z-indexes, $name) {
		@return (length($z-indexes) - index($z-indexes, $name)) + 1;
	} @else {
		@warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
		@return null;
	}
}
// .site-header {
//     z-index: z('site-header');
// }


@mixin fade($type) {
	@if $type == 'hide' {
		visibility: hidden;
		opacity: 0;
		transition: visibility 1s, opacity 1s;
	}
	@else if $type == 'show' {
		visibility: visible;
		opacity: 1;
		transition: visibility 1s, opacity 1s;
	}
}
//@include fade(hide);



$small : '(max-width: 480px)';
$medium: '(min-width: 768px)';
$medium-portrait: '(max-width: 767px)';
$medium-landscape: '(min-width: 768px) and (max-width: 979px)';
$large-desktop: '(min-width: 1200px)';
$xlarge-desktop: '(min-width: 1440px)';

@mixin mq($media) {
	@media only screen and #{$media} {
		@content;
	}
}
//@mixin mq($small)

$breakpoint-small: 767px !default;
$breakpoint-medium: 992px !default;
$breakpoint-large: 1200px !default;

$breakpoints: (
	'xlarge' '(min-width: ' + $breakpoint-large + ')',
	'large' '(min-width: ' + $breakpoint-medium + ') and (max-width: ' + ($breakpoint-large - 1) + ')',
	'medium' '(min-width: ' + ($breakpoint-small + 1) + ') and (max-width:' + ($breakpoint-medium - 1) + ')',
	'small' '(max-width: ' + $breakpoint-small + ')'
) !default;

// crete the grid
@mixin create-grid($name) {
	@for $i from 0 through $grid-columns {
		@if $i != 0 {
			.#{$name}-#{$i} {
				flex-basis: percentage($i / $grid-columns);
				max-width: percentage($i / $grid-columns);
			}
		}

		.#{$name}-offset-#{$i} {
			margin-left: percentage($i / $grid-columns);
		}
	}
}
